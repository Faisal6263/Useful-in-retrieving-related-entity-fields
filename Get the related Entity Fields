using System;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Xrm.Sdk.Query;

namespace firstProg
{
    public class UpdateTotalHoursandnoofdays : IPlugin
    {
        public void Execute(IServiceProvider serviceProvider)
        {
            ITracingService tracingService =
            (ITracingService)serviceProvider.GetService(typeof(ITracingService));

            IPluginExecutionContext context = (IPluginExecutionContext)
                serviceProvider.GetService(typeof(IPluginExecutionContext));

            IOrganizationServiceFactory serviceFactory =
                (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));

            IOrganizationService service = serviceFactory.CreateOrganizationService(context.UserId);

            if (context.InputParameters.Contains("Target") && context.InputParameters["Target"] is Entity)
            {
                Entity entity = (Entity)context.InputParameters["Target"];
                try
                {
                    double Totalhours = (double)entity["new_totalhours"];
                    int noOfDays = (int)entity["new_noofdays"];
                    var result = Totalhours / noOfDays;
                    result = Math.Round(result, 2);

                    var fetchItemsRelated = @"<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='false'>
                                              <entity name='new_item'>
                                                <attribute name='new_itemid' />
                                                <attribute name='new_name' />
                                                <attribute name='createdon' />
                                                <order attribute='new_name' descending='false' />
                                                <link-entity name='new_task' from='new_taskid' to='new_tasks' link-type='inner' alias='ab'>
                                                  <filter type='and'>
                                                    <condition attribute='new_taskid' operator='eq' uiname='akashÂ raval' uitype='new_task' value='" + entity.Id + @"' />
                                                  </filter>
                                                </link-entity>
                                              </entity>
                                            </fetch>";

                    EntityCollection results = service.RetrieveMultiple(new FetchExpression(fetchItemsRelated));

                    foreach (Entity item in results.Entities)
                    {
                        Entity itemEntity = service.Retrieve("new_item", item.Id, new ColumnSet(true));

                        itemEntity["new_hours"] = result;

                    }

                }

                catch (FaultException<OrganizationServiceFault> ex)
                {
                    throw new InvalidPluginExecutionException("An error occurred in FollowUpPlugin.", ex);
                }
                catch (Exception ex)
                {
                    tracingService.Trace("FollowUpPlugin: {0}", ex.ToString());
                    throw;
                }
            }
        }
    }
}
